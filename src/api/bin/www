#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("api:server");
var http = require("http");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
	debug("Listening on " + bind);
}

/**
 * Socket io server
 */

var onlineUsers = [];
var socketPort = normalizePort(process.env.PORT || "3001");
var io = require("socket.io")(socketPort, {
	cors: {
		origin: "*",
	},
});
io.on("connection", (socket) => {
	socket.on("login", (user) => {
		console.log(socket.id, "[USER]", user);
		let founded = false;
		for (let i = 0; i < onlineUsers.length; i++) {
			const onlineUser = onlineUsers[i];
			if (onlineUser.nickname === user.nickname) {
				founded = true;
				onlineUsers[i].room = socket.id;
			}
		}
		if (!founded) {
			user.room = socket.id;
			onlineUsers.push(user);
		}
		console.log("[ONLINE]", onlineUsers);
	});
	socket.on("message", (message, room) => {
		console.log(socket.id, "[MESSAGE]", message);
		console.log(socket.id, "[ROOM]", room);
		let itsBot = onlineUsers.find(
			(onlineUser) => onlineUser.room === room && onlineUser.bot
		);
		if (itsBot) {
			for (let i = 0; i < onlineUsers.length; i++) {
				const onlineUser = onlineUsers[i];
				if (onlineUser.room === socket.id) {
					if (message.content.includes("!Casos") || onlineUser.cases) {
						if (!onlineUser.cases) {
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Pais?",
							});
							onlineUsers[i].cases = { country: "" };
							break;
						} else if (onlineUser.cases.country === "") {
							onlineUsers[i].cases.country = message.content;
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Fecha?",
							});
							onlineUser.cases.date = "";
							break;
						} else if (onlineUser.cases.date === "") {
							onlineUsers[i].cases.date = message.content;
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Tipo de casos?",
							});
							onlineUsers[i].cases.type = "";
							break;
						} else if (onlineUser.cases.type === "") {
							onlineUsers[i].cases.type = message.content;
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Estoy listo!",
							});
							delete onlineUsers[i].cases;
							break;
						}
					} else if (
						message.content.toString().includes("!Grafica") ||
						onlineUser.graph
					) {
						if (!onlineUser.graph) {
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Pais?",
							});
							onlineUsers[i].graph = { country: "" };
							break;
						} else if (onlineUser.graph.country === "") {
							onlineUsers[i].graph.country = message.content;
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Fecha?",
							});
							onlineUser.graph.date = "";
							break;
						} else if (onlineUser.graph.date === "") {
							onlineUsers[i].graph.date = message.content;
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Estoy listo!",
							});
							delete onlineUsers[i].graph;
							break;
						}
					}
				}
			}
		} else {
			socket.to(room).emit("new-message", message);
		}
	});
	socket.on("disconnect", () => {
		onlineUser = onlineUsers.filter(
			(onlineUser) => onlineUser.room === socket.id
		);
		console.log("[DISCONNECTED]", socket.id);
	});
});
setInterval(() => {
	io.emit("online-users", onlineUsers);
}, 5000);
