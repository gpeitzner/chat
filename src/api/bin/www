#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("api:server");
var http = require("http");
var axios = require("axios");
const { ChartJSNodeCanvas } = require("chartjs-node-canvas");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
	debug("Listening on " + bind);
}

/**
 * Socket io server
 */

var onlineUsers = [];
var socketPort = normalizePort(process.env.PORT || "3001");
var io = require("socket.io")(socketPort, {
	cors: {
		origin: "*",
	},
});
io.on("connection", (socket) => {
	socket.on("login", (user) => {
		console.log(socket.id, "[USER]", user);
		let founded = false;
		for (let i = 0; i < onlineUsers.length; i++) {
			const onlineUser = onlineUsers[i];
			if (onlineUser.nickname === user.nickname) {
				founded = true;
				onlineUsers[i].room = socket.id;
			}
		}
		if (!founded) {
			user.room = socket.id;
			onlineUsers.push(user);
		}
		console.log("[ONLINE]", onlineUsers);
	});
	socket.on("message", (message, room) => {
		console.log(socket.id, "[MESSAGE]", message);
		console.log(socket.id, "[ROOM]", room);
		let itsBot = onlineUsers.find(
			(onlineUser) => onlineUser.room === room && onlineUser.bot
		);
		if (itsBot) {
			for (let i = 0; i < onlineUsers.length; i++) {
				const onlineUser = onlineUsers[i];
				if (onlineUser.room === socket.id) {
					if (message.content.includes("!Casos") || onlineUser.cases) {
						if (!onlineUser.cases) {
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Pais?",
							});
							onlineUsers[i].cases = { country: "" };
							break;
						} else if (onlineUser.cases.country === "") {
							onlineUsers[i].cases.country = message.content;
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Fecha?",
							});
							onlineUser.cases.date = "";
							break;
						} else if (onlineUser.cases.date === "") {
							onlineUsers[i].cases.date = message.content;
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Tipo de casos?",
							});
							onlineUsers[i].cases.type = "";
							break;
						} else if (onlineUser.cases.type === "") {
							onlineUsers[i].cases.type = message.content;
							generateSimpleReport(
								onlineUsers[i].cases.country,
								onlineUsers[i].cases.date,
								onlineUsers[i].cases.type
							)
								.then((finalMessage) =>
									io.to(socket.id).emit("new-message", finalMessage)
								)
								.catch((error) => console.error(error))
								.finally(() => delete onlineUsers[i].cases);
							break;
						}
					} else if (
						message.content.toString().includes("!Grafica") ||
						onlineUser.graph
					) {
						if (!onlineUser.graph) {
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Pais?",
							});
							onlineUsers[i].graph = { country: "" };
							break;
						} else if (onlineUser.graph.country === "") {
							onlineUsers[i].graph.country = message.content;
							io.to(socket.id).emit("new-message", {
								nickname: "BOT",
								content: "Fecha?",
							});
							onlineUser.graph.date = "";
							break;
						} else if (onlineUser.graph.date === "") {
							onlineUsers[i].graph.date = message.content;

							generateGraph(
								onlineUsers[i].graph.country,
								onlineUsers[i].graph.date
							)
								.then((dataUrl) => {
									io.to(socket.id).emit("new-message", {
										nickname: "BOT",
										content: dataUrl,
									});
								})
								.catch((error) => console.error(error))
								.finally(() => delete onlineUsers[i].graph);
							break;
						}
					}
				}
			}
		} else {
			socket.to(room).emit("new-message", message);
		}
	});
	socket.on("disconnect", () => {
		onlineUser = onlineUsers.filter(
			(onlineUser) => onlineUser.room === socket.id
		);
		console.log("[DISCONNECTED]", socket.id);
	});
});

setInterval(() => {
	io.emit("online-users", onlineUsers);
}, 5000);

function getData() {
	return new Promise((resolve, reject) => {
		axios.get("https://narek-t.github.io/covid19/timeseries_global.json").then(
			(response) => {
				resolve(response.data);
			},
			(error) => {
				reject(error);
			}
		);
	});
}

function generateSimpleReport(country, date, type) {
	return new Promise((resolve, reject) => {
		getData()
			.then((data) => {
				const countryData = data[country];
				const dayInfo = countryData.timeSeries.find(
					(record) => record.date === date
				);
				console.log(dayInfo);
				if (type === "confirmados") {
					resolve({
						nickname: "BOT",
						content: dayInfo.confirmed + " casos confirmados",
					});
					return;
				} else if (type === "recuperados") {
					resolve({
						nickname: "BOT",
						content: dayInfo.recovered + " casos recuperados",
					});
					return;
				} else if (type === "muertes") {
					resolve({
						nickname: "BOT",
						content: dayInfo.deaths + " muertes confirmadas",
					});
					return;
				} else {
					resolve({
						nickname: "BOT",
						content:
							dayInfo.confirmed +
							" casos confirmados, " +
							dayInfo.recovered +
							" muertes confirmadas, " +
							dayInfo.deaths +
							" casos recuperados",
					});
					return;
				}
			})
			.catch((error) => {
				reject(error);
			});
	});
}

function generateGraph(country, date) {
	return new Promise(async (resolve, reject) => {
		try {
			const data = await getData();
			let clearDates = date.split(" ");
			let lowerDate = Date.parse(clearDates[0]);
			let upperDate = Date.parse(clearDates[2]);
			const countryData = data[country];
			let labels = [];
			let confirmed = [];
			let deaths = [];
			let recovered = [];
			for (let i = 0; i < countryData.timeSeries.length; i++) {
				const record = countryData.timeSeries[i];
				if (
					Date.parse(record.date) >= lowerDate &&
					Date.parse(record.date) <= upperDate
				) {
					labels.push(record.date);
					confirmed.push(record.confirmed);
					deaths.push(record.deaths);
					recovered.push(record.recovered);
				}
			}
			const config = {
				type: "line",
				data: {
					labels: labels,
					datasets: [
						{
							label: "Confirmados",
							data: confirmed,
							fill: false,
							borderColor: "rgb(255, 0, 0)",
							tension: 0.1,
						},
						{
							label: "Recuperados",
							data: recovered,
							fill: false,
							borderColor: "rgb(0, 255, 0)",
							tension: 0.1,
						},
						{
							label: "Muertos",
							data: deaths,
							fill: false,
							borderColor: "rgb(0, 0, 0)",
							tension: 0.1,
						},
					],
				},
			};
			const width = 400;
			const height = 400;
			const chartJSNodeCanvas = new ChartJSNodeCanvas({ width, height });
			const configuration = config;
			const dataUrl = await chartJSNodeCanvas.renderToDataURL(configuration);
			resolve(dataUrl);
		} catch (error) {
			reject(error);
		}
	});
}
